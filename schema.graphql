# source: https://www.corex.app/_graphql?db=default
# timestamp: Sun Aug 11 2019 23:25:59 GMT-0500 (Central Daylight Time)

type Address {
  externalNumber: String
  id: String
  internalNumber: String
  neighborhood: String
  reference: String
  street: String
  postalCode: String
  neighborhoodData: Neighborhood
}

input AddressInput {
  externalNumber: String
  id: String
  internalNumber: String
  neighborhood: String
  reference: String
  street: String
  postalCode: String
  neighborhoodData: NeighborhoodInput
}

type Attribute {
  name: String
  type: String
  rgb: String
  units: String
  value: String
  displayValue: String
  selected: Boolean
}

input AttributeInput {
  name: String
  type: String
  rgb: String
  units: String
  value: String
  displayValue: String
  selected: Boolean
}

type Benefit {
  value: String
}

input BenefitInput {
  value: String
}

type billingData {
  billingAddressLine1: String
  billingAddressLine2: String
  billingName: String
  rfc: String
}

input billingDataInput {
  billingAddressLine1: String
  billingAddressLine2: String
  billingName: String
  rfc: String
}

type Block {
  group: String
  type: String
  props: [Block]
  displayname: String
  max: Int
  min: Int
  value: String
  displayName: String
}

input BlockInput {
  group: String
  type: String
  props: [BlockInput]
  displayname: String
  max: Int
  min: Int
  value: String
  displayName: String
}

type Bucket {
  displayName: String
  count: Int
  localCount: Int
  isAvailable: Boolean
}

type Card {
  date_created: ScalarDate
  date_last_updated: ScalarDate
  expiration_month: Int
  expiration_year: Int
  first_six_digits: String
  id: ID
  last_four_digits: String
  cardholder: Cardholder
}

type Cardholder {
  name: String
}

input CardholderInput {
  name: String
}

input CardInput {
  date_created: ScalarDate
  date_last_updated: ScalarDate
  expiration_month: Int
  expiration_year: Int
  first_six_digits: String
  id: ID
  last_four_digits: String
  cardholder: CardholderInput
}

type Cart {
  items: [CartItem]
  updatedAt: ScalarDate
  subtotal: ScalarPrice
  total: ScalarPrice
  qty: Int
  id: ID
  delivery: ScalarPrice
  sales: ScalarPrice
  subtotalWithoutTaxes: ScalarPrice
  totalWithoutTaxes: ScalarPrice
  deliveryWithoutTaxes: ScalarPrice
  ivaRate: Float
}

input CartInput {
  items: [CartItemInput]
  updatedAt: ScalarDate
  subtotal: ScalarPrice
  total: ScalarPrice
  qty: Int
  id: ID
  delivery: ScalarPrice
  sales: ScalarPrice
  subtotalWithoutTaxes: ScalarPrice
  totalWithoutTaxes: ScalarPrice
  deliveryWithoutTaxes: ScalarPrice
  ivaRate: Float
}

type CartItem {
  qty: Int
  sku: String
  price: ScalarPrice
  total: ScalarPrice
  data: Product
  height: Float
  length: Float
  totalVolume: Float
  totalWeight: Float
  volume: Float
  weight: Float
  width: Float
  id: ID
  sales: ScalarPrice
  subtotal: ScalarPrice
  listPrice: ScalarPrice
  totalWithoutTaxes: ScalarPrice
}

input CartItemInput {
  qty: Int
  sku: String
  price: ScalarPrice
  total: ScalarPrice
  data: ProductInput
  height: Float
  length: Float
  totalVolume: Float
  totalWeight: Float
  volume: Float
  weight: Float
  width: Float
  id: ID
  sales: ScalarPrice
  subtotal: ScalarPrice
  listPrice: ScalarPrice
  totalWithoutTaxes: ScalarPrice
}

type CategoryFacet {
  name: String
  attributes: [Attribute]
  category: String
}

input CategoryFacetInput {
  name: String
  attributes: [AttributeInput]
  category: String
}

type Checkout {
  addresses: [Address]
  cart: Cart
  id: ID
  address: Address
  transaction(token: String, email: String, paymentMethodId: String): Transaction
  chargeDescription: String
  isEmpty: Boolean
  status: String
  userData: userData
  billingData: billingData
}

input CheckoutInput {
  addresses: [AddressInput]
  cart: CartInput
  id: ID
  address: AddressInput
  transaction: TransactionInput
  chargeDescription: String
  isEmpty: Boolean
  status: String
  userData: userDataInput
  billingData: billingDataInput
}

type childrenSchema {
  type: String
  path: String
}

input childrenSchemaInput {
  type: String
  path: String
}

type Claim {
  enable: String
  id: ID
  value: String
}

input ClaimInput {
  enable: String
  id: ID
  value: String
}

type Contact {
  email: String
  message: String
  name: String
  subject: String
}

input ContactInput {
  email: String
  message: String
  name: String
  subject: String
}

type Cube {
  blocks: [Block]
  cubeId: String
  id: ID
}

input CubeInput {
  blocks: [BlockInput]
  cubeId: String
  id: ID
}

scalar Cursor

type Facet {
  id: ID
  displayName: String
  buckets: [Bucket]
}

type Fee {
  amount: ScalarPrice
  fee_payer: String
  type: String
}

input FeeInput {
  amount: ScalarPrice
  fee_payer: String
  type: String
}

type fieldDefinition {
  type: String
  path: String
  resolve: String
  uri: String
  required: Boolean
  deployList: Boolean
  children: childrenSchema
  options: [String]
  args: [metaSchemaArgs]
}

input fieldDefinitionMutation {
  type: String
  path: String
  resolve: String
  uri: String
  required: Boolean
  deployList: Boolean
  children: childrenSchemaInput
  options: [String]
  args: [metaSchemaArgsMutation]
}

input Filter {
  name: String
  value: String
}

type Interest {
  id: ID
  name: String
  subscribe: Boolean
}

input InterestInput {
  id: ID
  name: String
  subscribe: Boolean
}

type Inventory {
  id: ID
  onHandInventory: Int
  price: ScalarPrice
}

input InventoryInput {
  id: ID
  onHandInventory: Int
  price: ScalarPrice
}

type Lead {
  email: String
  interests: [Interest]
  lastname: String
  name: String
}

input LeadInput {
  email: String
  interests: [InterestInput]
  lastname: String
  name: String
}

type metaSchema {
  name: String
  options: [String]
  fields: [metaSchemaDefinition]
}

type metaSchemaArgs {
  name: String
  type: String
  operator: String
  value: String
  path: String
}

input metaSchemaArgsMutation {
  name: String
  type: String
  operator: String
  value: String
  path: String
}

type metaSchemaDefinition {
  name: String
  definition: fieldDefinition
}

input metaSchemaDefinitionMutation {
  name: String
  definition: fieldDefinitionMutation
}

input metaSchemaMutation {
  name: String
  options: [String]
  fields: [metaSchemaDefinitionMutation]
}

type Mutation {
  schema(input: metaSchemaMutation): metaSchema
  viewer(id: ID): viewer
}

type Neighborhood {
  id: ID
  city: String
  displayname: String
  state: String
  municipality: String
}

input NeighborhoodInput {
  id: ID
  city: String
  displayname: String
  state: String
  municipality: String
}

type orderListConnection {
  edges: [orderListEdge]
  totalPages: Int
  count: Int
  pages: [PageMetaData]
  currentPage: Int
  pageInfo: PageInfo
  suggest: Suggest
  facets: [Facet]
}

type orderListEdge {
  cursor: Cursor
  id: String!
  node: Checkout
}

type PageInfo {
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  startCursor: Cursor
  endCursor: Cursor
  finalCursor: Cursor
  currentQuery: String
}

type PageMetaData {
  page: Int
  cursor: Int
}

type Product {
  benefits: [Benefit]
  brand: String
  category: String
  description: String
  family: String
  height: Float
  id: String
  inventory: Int
  length: Float
  line: String
  name: String
  price: ScalarPrice
  sku: String
  weight: Float
  width: Float
  image: String
  model: String
  attributes: [Attribute]
  uri: String
  absoluteuri: String
  taxonomyParent: Taxonomy
  qty: Int
  basePrice: ScalarPrice
  formattedPrice: String
  discountRate: Float
  listPrice: ScalarPrice
  hasDiscount: Boolean
  variations: [variationAttribute]
  hasVariations: Boolean
}

input ProductInput {
  benefits: [BenefitInput]
  brand: String
  category: String
  description: String
  family: String
  height: Float
  id: String
  inventory: Int
  length: Float
  line: String
  name: String
  price: ScalarPrice
  sku: String
  weight: Float
  width: Float
  image: String
  model: String
  attributes: [AttributeInput]
  uri: String
  absoluteuri: String
  taxonomyParent: TaxonomyInput
  qty: Int
  basePrice: ScalarPrice
  formattedPrice: String
  discountRate: Float
  listPrice: ScalarPrice
  hasDiscount: Boolean
  variations: [variationAttributeInput]
  hasVariations: Boolean
}

type productListConnection {
  edges: [productListEdge]
  totalPages: Int
  count: Int
  pages: [PageMetaData]
  currentPage: Int
  pageInfo: PageInfo
  suggest: Suggest
  facets: [Facet]
}

type productListEdge {
  cursor: Cursor
  id: String!
  node: Product
}

type Query {
  schemas: [metaSchema]
  viewer(id: ID): viewer
}

type Roles {
  admin: String
  checkoutTester: String
  owner: String
  tester: String
}

"""Fecha en formato JS"""
scalar ScalarDate

"""Precio"""
scalar ScalarPrice

"""Objeto para ordenar resultados de ElasticSearch"""
input Sort {
  """Nombre de la propiedad que se utilizara para ordenar"""
  property: String

  """Direcci√≥n del orden deseado"""
  value: VectorOrder
}

type Suggest {
  text: String
  highlighted: String
  score: Float
}

type Taxonomy {
  id: ID
  index: Int
  name: String
  parent: Taxonomy
  childrens: [Taxonomy]
  url: String
}

input TaxonomyInput {
  id: ID
  index: Int
  name: String
  parent: TaxonomyInput
  childrens: [TaxonomyInput]
  url: String
}

type Template {
  cubes: [Cube]!
  id: ID
  uri: String!
  requestedUri: String
}

type Transaction {
  id: ID
  binary_mode: Boolean
  call_for_authorize_id: String
  captured: Boolean
  date_approved: ScalarDate
  date_created: ScalarDate
  date_last_updated: ScalarDate
  date_of_expiration: ScalarDate
  description: String
  errorMessage: String
  installments: Int
  issuer_id: String
  live_mode: Boolean
  operation_type: String
  orderError: String
  orderID: String
  payment_method_id: String
  payment_type_id: String
  status: String
  status_detail: String
  success: Boolean
  fee_details: [Fee]
  card: Card
}

input TransactionInput {
  id: ID
  binary_mode: Boolean
  call_for_authorize_id: String
  captured: Boolean
  date_approved: ScalarDate
  date_created: ScalarDate
  date_last_updated: ScalarDate
  date_of_expiration: ScalarDate
  description: String
  errorMessage: String
  installments: Int
  issuer_id: String
  live_mode: Boolean
  operation_type: String
  orderError: String
  orderID: String
  payment_method_id: String
  payment_type_id: String
  status: String
  status_detail: String
  success: Boolean
  fee_details: [FeeInput]
  card: CardInput
}

type userData {
  displayName: String
  email: String
  phone: String
}

input userDataInput {
  displayName: String
  email: String
  phone: String
}

type variationAttribute {
  field: String
  values: [Attribute]
  selectedAttribute: Attribute
}

input variationAttributeInput {
  field: String
  values: [AttributeInput]
  selectedAttribute: AttributeInput
}

"""Direcci√≥n del orden deseado"""
enum VectorOrder {
  asc
  desc
}

type viewer {
  id: ID
  template(cubes: [CubeInput], uri: String): Template
  product(id: String, model: String, selectedAttributes: [AttributeInput]): Product
  productList(after: Cursor, before: Cursor, last: Int, first: Int, query: String, defaultFilter: Filter, useAutocomplete: Boolean, filters: [Filter], attributes: [Filter], sort: [Sort]): productListConnection
  masive(spreadsheetId: String, sheet: String): String
  products(products: [ProductInput]): [Product]
  taxonomy(name: String, index: Int, parent: String, useDelete: Boolean): [Taxonomy]
  token: String
  inventory(items: [InventoryInput]): [Inventory]
  cart(sku: String, qty: Int): Cart
  neighborhoods(postalCode: String): [Neighborhood]
  address(address: AddressInput): Address
  addresses: [Address]
  checkout(address: String, userData: userDataInput, billingData: billingDataInput): Checkout
  roles: Roles
  lead(lead: LeadInput): Lead
  claims(id: String, claims: [ClaimInput]): [Claim]
  order(order: String): Checkout
  facets(facets: [CategoryFacetInput]): [CategoryFacet]
  contact(contact: ContactInput): Contact
  orderList(after: Cursor, before: Cursor, last: Int, first: Int, query: String, defaultFilter: Filter, useAutocomplete: Boolean, filters: [Filter], attributes: [Filter], sort: [Sort]): orderListConnection
  orders(orders: [CheckoutInput]): [Checkout]
}
